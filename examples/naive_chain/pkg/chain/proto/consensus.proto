syntax = "proto3";

package consensus;
option go_package = "github.com/nastya-biran/SmartBFT/examples/naive_chain/pkg/chain/proto";


import "smartbftprotos/messages.proto";


service ConsensusService {
  
  rpc SendConsensusMessage(ConsensusMessageRequest) returns (ConsensusMessageResponse) {}
  
  
  rpc SendTransaction(TransactionRequest) returns (TransactionResponse) {}

  rpc Sync(SyncRequest) returns (SyncResponse) {}
}


service TransactionService {
  rpc SubmitTransaction(ClientTransactionRequest) returns (TransactionResponse) {}
}

message ConsensusMessageRequest {
  uint64 from_node = 1;
  uint64 to_node = 2;
  smartbftprotos.Message message = 3;
}

message ConsensusMessageResponse {
  bool success = 1;
  string error = 2;
}

message Transaction {
  string client_id = 1;
  string id = 2;
}

message TransactionRequest {
  uint64 from_node = 1;
  uint64 to_node = 2;
  Transaction tx = 3;
}

message ClientTransactionRequest {
  Transaction tx = 1;
}

message TransactionResponse {
  bool success = 1;
  string error = 2;
} 

message SyncRequest {
  uint64 sequence = 1;  
  uint64 from_node = 2; 
}

message SyncResponse {
  uint64 sequence = 1;                
  bool has_proposal = 2;              
  smartbftprotos.Proposal proposal = 3;              
  repeated smartbftprotos.Signature signatures = 4; 
}